A magic square is an arrangement of numbers (usually integers) in a square grid, there are numbers in the forward and backward main diagonals, all add up to the same number. Write a program to find whether a given matrix is a magic square or not.

Input Format

The input consists of (n*n+1) integers.
The first integer corresponds to the number of rows/columns in the matrix.
The remaining integers correspond to the elements in the matrix.
The elements are read in row-wise order, the first row first, then the second row, and so on.
Constraints

NA

Output Format

Print yes if it is a magic square.
Print no if it is not a magic square.
Sample Input 0

2
4 5
5 4
Sample Output 0

No
Sample Input 1

4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
Sample Output 1

Yes

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include<stdbool.h>
#define MAX_SIZE 100

bool isMagicSquare(int matrix[MAX_SIZE][MAX_SIZE], int n) {
    int sum = 0, sum2 = 0;

    // Check sum of the main diagonal
    for (int i = 0; i < n; i++) {
        sum += matrix[i][i];
    }

    // Check sum of the other diagonal
    sum2 = 0;
    for (int i = 0; i < n; i++) {
        sum2 += matrix[i][n-i-1];
    }
    if (sum2 != sum) {
        return false;
    }

    return true;
}

int main() {
    int n;
    int matrix[MAX_SIZE][MAX_SIZE];

    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    if (isMagicSquare(matrix, n)) {
        printf("Yes\n");
    } else {
        printf("No\n");
    }

    return 0;
}
